Gepubliceerd

2023-week-49 Over Mastery.md
2023-week-50 Over Zeemeerminnen.md
2023-week-51 Over Dynamics of software development.md
2024-week-02 Over wetenschappelijk bewijzen.md
2024-week-03 Over De meeste mensen deugen.md
2024-week-04 Over het verschil tussen software en hardware.md
2024-week-05 Over wat en hoe.md
2024-week-06 Over Intention Revealing Programming.md
2024-week-07 Over Coding Guidelines.md
2024-week-09 Over Generaties van talen.md
2024-week-10 Over Compileren Transpileren Interpreteren.md
2024-week-11 Over Software is everywhere.md
2024-week-12 Over Software is eating the world.md
2024-week-13 Over De noodzaak van eenvoud.md
2024-week-14 Over Compileren II.md
2024-week-15 Over De moeilijkheid van Communicatie.md
2024-week-16 Over Wat en Hoe II.md
2024-week-17 Over Sequentie Selectie Iteratie.md
2024-week-18 Over het relationele van een rdbms.md
2024-week-19 Over goedkope opslag.md
2024-week-20 Over de wiskundeknobbel.md
2024-week-21 Over Pet projects.md
2024-week-22 Over Conferenties.md
2024-week-23 Over GitHub Copilot.md
2024-week-25 Over het intelligente in AI.md
2024-week-26 Overdenkingen.md

====================================
Onderwerpen:

------------------------------------

De van disk afgeleide database taal (SQL) kent zijn eigen grammatica: CRUD.

CRUD is slechts één van de drie drie taal varianten binnen SQL:

DML: Data Manipulation Language (SELECT, INSERT, UPDATE, DELETE, MERGE)
DDL: Data Definition Language (CREATE, ALTER, DROP)
DAL: Data Authorization Language (GRANT, REVOKE, DENY)
DTL: Data Transaction Language (BEGIN TRANSACTION, COMMIT, ROLLBACK)

Create (INSERT) = Write, append to file
Read (SELECT) = Read from file
Update (UPDATE) = Overwrite in file
Delete (DELETE) = Overwrite with 0000

------------------------------------
Which Programming Languages Use the Least Electricity?
https://thenewstack.io/which-programming-languages-use-the-least-electricity/


------------------------------------
Het belang van nieuwsgierigheid ...

Why Most Engineers Aren't 10x Engineers
https://www.developing.dev/p/why-most-engineers-arent-10x-engineers

“My whole view of life is that we cannot know the skills we will need tomorrow. So we need curiosity, humility, and the desire to learn the answers, not to already know them,”
Sanjay Srivastava (in https://blogs.idc.com/2024/09/13/hire-for-potential-not-for-skills/)


------------------------------------
Naming:


Lees eens hardop voor:

``` csharp
interface IQueryActiveCart{}
class ActiveCartQuery : IQueryActiveCart {}

interface ICommandCreateCart{}
class CreateCartCommand : ICommandCreateCart {}

// Usage:
class Controller
{
    private readonly ICommandCreateCart _createCartCommand;
	private readonly IQueryActiveCart _activeCartQuery;
	
    public Controller
	(
		IQueryActiveCart activeCartQuery,
		ICommandCreateCart createCartCommand
	)
    {
        _activeCartQuery = activeCartQuery;
        _createCartCommand = createCartCommand;
    }
    ...
}
```

versus:

``` csharp
interface IActiveCartQuery{}
class ActiveCartQuery : IActiveCartQuery {}

interface ICreateCartCommand{}
class CreateCartCommand : ICreateCartCommand {}


// Usage:
class Controller
{
    private readonly ICreateCartCommand _createCartCommand;
	private readonly IActiveCartQuery _activeCartQuery;
	
    public Controller
	(
		IActiveCartQuery activeCartQuery,
		ICreateCartCommand createCartCommand
	)
    {
        _activeCartQuery = activeCartQuery;
        _createCartCommand = createCartCommand;
    }
    ...
}
```

Bemerk eens hoe de interfaces (wat *beloof* ik) en de implementaties -classes- (wat *ben* ik) in het eerste voorbeeld genuanceerder expliciet zijn. Vooral bij gebruik (in controllers).
En valt je bij het laatste voorbeeld de dodelijk eentonige repetitie op?


---------------------
Monorepo vs Multi-repo

---------------------
TCP
Train, Coach, Pair

---------------------
Why do we need managers?

---------------------
Scrum = dead

---------------

 the famous quote by Phil Karlton: "There are only two hard things in computer science: cache invalidation and naming things."

---------------
Two rules of thumb
Rule one: after I make a decision about a tradeoff, I need a plan to address the negative consequences of my choice, in a way that doesn't also add in the negative consequences of the other choice.
Rule two: this explains a lot of the movement (or more cynically, churn) in software tech. Even when we make the right choice overall, in the moment we're still under a lot of pain, and so we look for new tools/technologies/practices that address the pain we currently feel.
Bonus rule: part of the reason we do Software Mimicry is to reduce the pain of a choice we made.

---------------

The World Depends on 60-Year-Old Code No One Knows Anymore
https://www.youtube.com/watch?v=LWYmGhIFy-A

No Code App Development is a Trap
https://www.youtube.com/watch?v=xkMuykgicYA

---------------

Idempotency is a crucial concept for REST APIs that ensures the reliability and consistency of your system. An idempotent operation can be repeated multiple times without changing the result beyond the initial API request. This property is especially important in distributed systems, where network failures or timeouts can lead to repeated requests.

Implementing idempotency in your API brings several benefits:

It prevents unintended duplicate operations
It improves reliability in distributed systems
It helps handle network issues and retries gracefully
In this week's issue, we'll explore how to implement idempotency in ASP .NET Core APIs, ensuring your system remains robust and reliable.

What is Idempotence?
Idempotence, in the context of web APIs, means that making multiple identical requests should have the same effect as making a single request. In other words, no matter how many times a client sends the same request, the server-side effect should only occur once.

The RFC 9110 standard about HTTP Semantics offers a definition we could use. Here's what it says about idempotent methods:

A request method is considered "idempotent" if the intended effect on the server of multiple identical requests with that method is the same as the effect for a single such request.
​
Of the request methods defined by this specification, PUT, DELETE, and safe request methods [(GET, HEAD, OPTIONS, and TRACE) - author's note] are idempotent.
​
— RFC 9110 (HTTP Semantics), Section 9.2.2, Paragraph 1
However, the following paragraph is quite interesting. It clarifies that the server can implement "other non-idempotent side effects" that don't apply to the resource.

... the idempotent property only applies to what has been requested by the user; a server is free to log each request separately, retain a revision control history, or implement other non-idempotent side effects for each idempotent request.
​
— RFC 9110 (HTTP Semantics), Section 9.2.2, Paragraph 2
The benefits of implementing idempotency extend beyond just adhering to HTTP method semantics. It significantly improves the reliability of your API, especially in distributed systems where network issues can lead to retried requests. By implementing idempotency, you prevent duplicate operations that could occur due to client retries.

Which HTTP Methods are Idempotent?
Several HTTP methods are inherently idempotent:

GET, HEAD: Retrieve data without modifying the server state.
PUT: Update a resource, resulting in the same state regardless of repetition.
DELETE: Remove a resource with the same outcome for multiple requests.
OPTIONS: Retrieve communication options information.
POST is not inherently idempotent, as it typically creates resources or processes data. Repeated POST requests could create multiple resources or trigger multiple actions.

However, we can implement idempotency for POST methods using custom logic.

Note: While POST requests aren't naturally idempotent, we can design them to be. For example, checking for existing resources before creation ensures that repeated POST requests don't result in duplicate actions or resources.

---------------


“We’re agile” has come to mean “We’re moving fast and breaking things to get new, not-thought-out untested features delivered this quarter to make our executives look good at the industry conference”. Or, “No we don’t have a plan, we react to whatever is happening now”, or “Our development team runs at 100% utilization because idle developers cost us money, and developers are expensive.”
https://georgestocker.com/2024/08/16/agile-is-not-a-process/

“The best architectures, requirements, and designs emerge from self-organizing teams.”
The best architectures, requirements, and designs demonstrably do not emerge from self-organizing teams, because those self-organizing teams have constraints they don’t control. It doesn’t matter if the four of us on a team get to pick what we work on, or what tech-stack we use, or whether we make it a relational database or a no-sql database. We’re not the Avengers. We don’t have superpowers that obviate the need for resources and budgets. (As an aside, in the MCU movies, shield doesn’t seem to do anything other than get in the Superheroes way; whereas for the non-superheroes among us, we’re always dependent on some sort of bureaucracy to support our work).

------------------------------------

Deploy vs Release / Feature flags

------------------------------------

Waarom winst van Trump mogelijk grote gevolgen heeft voor de digitale overheid
https://ibestuur.nl/artikel/waarom-winst-van-trump-mogelijk-grote-gevolgen-heeft-voor-de-digitale-overheid/

------------------------------------
