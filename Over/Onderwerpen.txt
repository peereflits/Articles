Gepubliceerd

2023-week-49 Over Mastery.md | Mastery vs professionaliteit
2023-week-50 Over Zeemeerminnen.md | Mermaid.js
2023-week-51 Over Dynamics of software development.md | Dynamics of software development
2024-week-02 Over wetenschappelijk bewijzen.md | Testen & Wetenschappelijk bewijzen
2024-week-03 Over De meeste mensen deugen.md | De meeste mensen deugen
2024-week-04 Over het verschil tussen software en hardware.md | Over het verschil tussen software en hardware
2024-week-05 Over wat en hoe.md | Over *wat* en *hoe* (declaratief versus imperatief)
2024-week-06 Over Intention Revealing Programming.md | Over Intention Revealing Programming
2024-week-07 Over Coding Guidelines.md | Over Coding Guidelines

====================================
Onderwerpen:


------------------------------------

------------------------------------

De van disk afgeleide database taal (SQL) kent zijn eigen grammatica: CRUD.

CRUD is slechts één van de drie drie taal varianten binnen SQL:

DML: Data Manipulation Language (SELECT, INSERT, UPDATE, DELETE)
DDL: Data Definition Language (CREATE, ALTER, DROP)
DAL: Data Authorization Language (GRANT, REVOKE, DENY)
DTL: Data Transaction Language (BEGIN TRANSACTION, COMMIT, ROLLBACK)

Create (INSERT) = Write, append to file
Read (SELECT) = Read from file
Update (UPDATE) = Overwrite in file
Delete (DELETE) = Overwrite with 0000

------------------------------------
Which Programming Languages Use the Least Electricity?
https://thenewstack.io/which-programming-languages-use-the-least-electricity/


------------------------------------
Het belang van nieuwsgierigheid ...

Why Most Engineers Aren't 10x Engineers
https://www.developing.dev/p/why-most-engineers-arent-10x-engineers

------------------------------------
GitHub Copilot

Get better answers by setting the context for GitHub Copilot Chat in Visual Studio
https://learn.microsoft.com/en-us/visualstudio/ide/copilot-chat-context?view=vs-2022

Understanding how GitHub Copilot works
https://techcommunity.microsoft.com/t5/educator-developer-blog/understanding-how-github-copilot-works/ba-p/4021562

GitHub Copilot Chat
https://marketplace.visualstudio.com/items?itemName=VisualStudioExptTeam.VSGitHubCopilot
https://devblogs.microsoft.com/visualstudio/copilot-chat-slash-commands-and-context-variables/

GitHub Copilot
https://marketplace.visualstudio.com/items?itemName=GitHub.copilotvs
https://docs.github.com/en/copilot/using-github-copilot/getting-started-with-github-copilot

https://github.blog/2024-02-22-how-ai-code-generation-works/

Quick Tip: Use Threads to Improve Chat with GitHub Copilot in Visual Studio 2022
https://visualstudiomagazine.com/Articles/2024/03/11/chat-threads.aspx


------------------------------------
“There are two ways of constructing a software design: One way is to make it so simple that there are obviously no deficiencies, and the other way is to make it so complicated that there are no obvious deficiencies. The first method is far more difficult.” 
-- Tony Hoare --
https://en.wikiquote.org/wiki/C._A._R._Hoare
If you can’t do the first variant, the second way starts looking awfully attractive perhaps.

"The most important property of a program is whether it accomplishes the intentions of its user."
-- Tony Hoare --
https://en.wikiquote.org/wiki/C._A._R._Hoare


------------------------------------
Naming:


Lees eens harop voor:

``` csharp
interface IQueryActiveCart{}
class ActiveCartQuery : IQueryActiveCart {}

interface ICommandCreateCart{}
class CreateCartCommand : ICommandCreateCart {}

// Usage:
class Controller
{
    private readonly ICommandCreateCart _createCartCommand;
	private readonly IQueryActiveCart _activeCartQuery;
	
    public Controller
	(
		IQueryActiveCart activeCartQuery,
		ICommandCreateCart createCartCommand
	)
    {
        _activeCartQuery = activeCartQuery;
        _createCartCommand = createCartCommand;
    }
    ...
}
```

versus:

``` csharp
interface IActiveCartQuery{}
class ActiveCartQuery : IActiveCartQuery {}

interface ICreateCartCommand{}
class CreateCartCommand : ICreateCartCommand {}


// Usage:
class Controller
{
    private readonly ICreateCartCommand _createCartCommand;
	private readonly IActiveCartQuery _activeCartQuery;
	
    public Controller
	(
		IActiveCartQuery activeCartQuery,
		ICreateCartCommand createCartCommand
	)
    {
        _activeCartQuery = activeCartQuery;
        _createCartCommand = createCartCommand;
    }
    ...
}
```

Bemerk eens hoe de interfaces (wat *beloof* ik) en de implementaties -classes- (wat *ben* ik) in het eerste voorbeeld genuanceerder expliciet zijn. Vooral bij gebruik (in controllers).
En valt je bij het laatste voorbeeld de dodelijk eentonige repetitie op?
 


