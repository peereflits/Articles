Gepubliceerd

2023-week-49 Over Mastery.md
2023-week-50 Over Zeemeerminnen.md
2023-week-51 Over Dynamics of software development.md
2024-week-02 Over wetenschappelijk bewijzen.md
2024-week-03 Over De meeste mensen deugen.md
2024-week-04 Over het verschil tussen software en hardware.md
2024-week-05 Over wat en hoe.md
2024-week-06 Over Intention Revealing Programming.md
2024-week-07 Over Coding Guidelines.md
2024-week-09 Over Generaties van talen.md
2024-week-10 Over Compileren Transpileren Interpreteren.md
2024-week-11 Over Software is everywhere.md
2024-week-12 Over Software is eating the world.md
2024-week-13 Over De noodzaak van eenvoud.md
2024-week-14 Over Compileren II.md
2024-week-15 Over De moeilijkheid van Communicatie.md
2024-week-16 Over Wat en Hoe II.md
2024-week-17 Over Sequentie Selectie Iteratie.md
2024-week-18 Over het relationele van een rdbms.md
2024-week-19 Over goedkope opslag.md
2024-week-20 Over de wiskundeknobbel.md
2024-week-21 Over Pet projects.md
2024-week-22 Over Conferenties.md
2024-week-23 Over GitHub Copilot.md
2024-week-25 Over het intelligente in AI.md
2024-week-26 Overdenkingen.md

====================================
Onderwerpen:

------------------------------------

De van disk afgeleide database taal (SQL) kent zijn eigen grammatica: CRUD.

CRUD is slechts Ã©Ã©n van de drie drie taal varianten binnen SQL:

DML: Data Manipulation Language (SELECT, INSERT, UPDATE, DELETE, MERGE)
DDL: Data Definition Language (CREATE, ALTER, DROP)
DAL: Data Authorization Language (GRANT, REVOKE, DENY)
DTL: Data Transaction Language (BEGIN TRANSACTION, COMMIT, ROLLBACK)

Create (INSERT) = Write, append to file
Read (SELECT) = Read from file
Update (UPDATE) = Overwrite in file
Delete (DELETE) = Overwrite with 0000

------------------------------------
Which Programming Languages Use the Least Electricity?
https://thenewstack.io/which-programming-languages-use-the-least-electricity/


------------------------------------
Het belang van nieuwsgierigheid ...

Why Most Engineers Aren't 10x Engineers
https://www.developing.dev/p/why-most-engineers-arent-10x-engineers


------------------------------------
Naming:


Lees eens hardop voor:

``` csharp
interface IQueryActiveCart{}
class ActiveCartQuery : IQueryActiveCart {}

interface ICommandCreateCart{}
class CreateCartCommand : ICommandCreateCart {}

// Usage:
class Controller
{
    private readonly ICommandCreateCart _createCartCommand;
	private readonly IQueryActiveCart _activeCartQuery;
	
    public Controller
	(
		IQueryActiveCart activeCartQuery,
		ICommandCreateCart createCartCommand
	)
    {
        _activeCartQuery = activeCartQuery;
        _createCartCommand = createCartCommand;
    }
    ...
}
```

versus:

``` csharp
interface IActiveCartQuery{}
class ActiveCartQuery : IActiveCartQuery {}

interface ICreateCartCommand{}
class CreateCartCommand : ICreateCartCommand {}


// Usage:
class Controller
{
    private readonly ICreateCartCommand _createCartCommand;
	private readonly IActiveCartQuery _activeCartQuery;
	
    public Controller
	(
		IActiveCartQuery activeCartQuery,
		ICreateCartCommand createCartCommand
	)
    {
        _activeCartQuery = activeCartQuery;
        _createCartCommand = createCartCommand;
    }
    ...
}
```

Bemerk eens hoe de interfaces (wat *beloof* ik) en de implementaties -classes- (wat *ben* ik) in het eerste voorbeeld genuanceerder expliciet zijn. Vooral bij gebruik (in controllers).
En valt je bij het laatste voorbeeld de dodelijk eentonige repetitie op?


---------------------
GitGub Copilot Dev Productivity
Another Report Weighs In on GitHub Copilot Dev Productivity: ðŸ‘Ž
https://visualstudiomagazine.com/Articles/2024/09/17/Another-Report-Weighs-In-on-GitHub-Copilot-Dev-Productivity.aspx

---------------------
Monorepo vs Multi-repo

---------------------
TCP
Train, Coach, Pair

---------------------
Why do we need managers?

---------------------
Scrum = dead

---------------------

Microservices are Technical Debt
https://www.youtube.com/watch?v=LcJKxPXYudE

---------------

